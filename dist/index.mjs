var e=(e,i,t)=>new Promise(((n,o)=>{var r=e=>{try{d(t.next(e))}catch(e){o(e)}},s=e=>{try{d(t.throw(e))}catch(e){o(e)}},d=e=>e.done?n(e.value):Promise.resolve(e.value).then(r,s);d((t=t.apply(e,i)).next())}));import{ncrypt as i}from"ncrypt-js";var t=class extends Error{constructor(e){super(e)}},n=class{constructor(e,n){var o,r;if(this.models=e,!n.secret)throw new t("Secret is required.");this.sessionExpiresIn=null!=(o=n.sessionExpiresIn)?o:108e5,this.codeExpiresIn=null!=(r=n.sessionExpiresIn)?r:9e5;const s=new i(n.secret);this.ncrypt=s,this.mailer=n.mailer}encode(e){return this.ncrypt.encrypt(e)}decode(e){return this.ncrypt.decrypt(e).toString()}generateVerificationCode(){return Math.floor(1e7+9e7*Math.random()).toString()}getVerificationCode(i){return e(this,null,(function*(){const e=yield this.models.user.findByEmail(i);if(!e)throw new t("User not found.");const n=yield this.models.verificationCode.findByUserId(e.id);if(n)return yield this.models.verificationCode.update(n.id,{expiresIn:Date.now()+this.codeExpiresIn}),[e,this.decode(n.code)];const o=this.generateVerificationCode();return yield this.models.verificationCode.create({code:this.encode(o),expiresIn:Date.now()+this.codeExpiresIn,userId:e.id}),[e,o]}))}sendVerificationCode(i){return e(this,null,(function*(){const[e,t]=yield this.getVerificationCode(i);return yield this.mailer(e,t),e}))}validateVerificationCode(i,n){return e(this,null,(function*(){const e=yield this.models.user.findByEmail(i);if(!e)throw new t("User not found.");const o=yield this.models.verificationCode.findByUserId(e.id);if(!o)throw new t("Verification code not found.");const r=this.decode(o.code);if(o.expiresIn<Date.now())throw yield this.models.verificationCode.remove(o.id),new t("Verification code expired.");if(r!==n)throw new t("Verification code is incorrect.");yield this.models.verificationCode.remove(o.id);return yield this.models.session.create({user:e,expiresIn:Date.now()+this.sessionExpiresIn})}))}validateUserSession(i){return e(this,null,(function*(){const e=yield this.models.session.findById(i);if(!e)throw new t("Session not found.");if(e.expiresIn<Date.now())throw yield this.models.session.remove(e.id),new t("Session expired.");return e}))}};export{t as AuthError,n as Client};